/**
 */
package sensingflow.model.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import sensingflow.model.util.SensingflowAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SensingflowItemProviderAdapterFactory extends SensingflowAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SensingflowItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link sensingflow.model.SensingflowContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensingflowContainerItemProvider sensingflowContainerItemProvider;

	/**
	 * This creates an adapter for a {@link sensingflow.model.SensingflowContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensingflowContainerAdapter() {
		if (sensingflowContainerItemProvider == null) {
			sensingflowContainerItemProvider = new SensingflowContainerItemProvider(this);
		}

		return sensingflowContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sensingflow.model.SensingflowProcessor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensingflowProcessorItemProvider sensingflowProcessorItemProvider;

	/**
	 * This creates an adapter for a {@link sensingflow.model.SensingflowProcessor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensingflowProcessorAdapter() {
		if (sensingflowProcessorItemProvider == null) {
			sensingflowProcessorItemProvider = new SensingflowProcessorItemProvider(this);
		}

		return sensingflowProcessorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sensingflow.model.SensingflowNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensingflowNodeItemProvider sensingflowNodeItemProvider;

	/**
	 * This creates an adapter for a {@link sensingflow.model.SensingflowNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensingflowNodeAdapter() {
		if (sensingflowNodeItemProvider == null) {
			sensingflowNodeItemProvider = new SensingflowNodeItemProvider(this);
		}

		return sensingflowNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sensingflow.model.SensingflowThing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensingflowThingItemProvider sensingflowThingItemProvider;

	/**
	 * This creates an adapter for a {@link sensingflow.model.SensingflowThing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensingflowThingAdapter() {
		if (sensingflowThingItemProvider == null) {
			sensingflowThingItemProvider = new SensingflowThingItemProvider(this);
		}

		return sensingflowThingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sensingflow.model.SensingflowSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensingflowSensorItemProvider sensingflowSensorItemProvider;

	/**
	 * This creates an adapter for a {@link sensingflow.model.SensingflowSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensingflowSensorAdapter() {
		if (sensingflowSensorItemProvider == null) {
			sensingflowSensorItemProvider = new SensingflowSensorItemProvider(this);
		}

		return sensingflowSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sensingflow.model.SensingflowTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensingflowTaskItemProvider sensingflowTaskItemProvider;

	/**
	 * This creates an adapter for a {@link sensingflow.model.SensingflowTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensingflowTaskAdapter() {
		if (sensingflowTaskItemProvider == null) {
			sensingflowTaskItemProvider = new SensingflowTaskItemProvider(this);
		}

		return sensingflowTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sensingflow.model.SensingflowLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensingflowLinkItemProvider sensingflowLinkItemProvider;

	/**
	 * This creates an adapter for a {@link sensingflow.model.SensingflowLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensingflowLinkAdapter() {
		if (sensingflowLinkItemProvider == null) {
			sensingflowLinkItemProvider = new SensingflowLinkItemProvider(this);
		}

		return sensingflowLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sensingflow.model.SensingflowPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensingflowPortItemProvider sensingflowPortItemProvider;

	/**
	 * This creates an adapter for a {@link sensingflow.model.SensingflowPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensingflowPortAdapter() {
		if (sensingflowPortItemProvider == null) {
			sensingflowPortItemProvider = new SensingflowPortItemProvider(this);
		}

		return sensingflowPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sensingflow.model.SensingflowInPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensingflowInPortItemProvider sensingflowInPortItemProvider;

	/**
	 * This creates an adapter for a {@link sensingflow.model.SensingflowInPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensingflowInPortAdapter() {
		if (sensingflowInPortItemProvider == null) {
			sensingflowInPortItemProvider = new SensingflowInPortItemProvider(this);
		}

		return sensingflowInPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sensingflow.model.SensingflowOutPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensingflowOutPortItemProvider sensingflowOutPortItemProvider;

	/**
	 * This creates an adapter for a {@link sensingflow.model.SensingflowOutPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensingflowOutPortAdapter() {
		if (sensingflowOutPortItemProvider == null) {
			sensingflowOutPortItemProvider = new SensingflowOutPortItemProvider(this);
		}

		return sensingflowOutPortItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (sensingflowContainerItemProvider != null) sensingflowContainerItemProvider.dispose();
		if (sensingflowProcessorItemProvider != null) sensingflowProcessorItemProvider.dispose();
		if (sensingflowNodeItemProvider != null) sensingflowNodeItemProvider.dispose();
		if (sensingflowThingItemProvider != null) sensingflowThingItemProvider.dispose();
		if (sensingflowSensorItemProvider != null) sensingflowSensorItemProvider.dispose();
		if (sensingflowTaskItemProvider != null) sensingflowTaskItemProvider.dispose();
		if (sensingflowLinkItemProvider != null) sensingflowLinkItemProvider.dispose();
		if (sensingflowPortItemProvider != null) sensingflowPortItemProvider.dispose();
		if (sensingflowInPortItemProvider != null) sensingflowInPortItemProvider.dispose();
		if (sensingflowOutPortItemProvider != null) sensingflowOutPortItemProvider.dispose();
	}

}
